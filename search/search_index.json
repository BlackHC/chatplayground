{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chat Playground \u00b6 A simple local chat playground with power user features. All messages are stored as JSON files in a local directory, making it easy to sync them with a cloud service like Dropbox or Google Drive and access them from multiple devices while protecting your privacy. Motivation \u00b6 The ChatGPP web app is a great way to play with LLMs, but it has a few limitations: It's not possible to edit messages without deleting everything below. It's hard to see what the explored alternatives are for a given message. It's hard to see what the explored alternatives are for a given message thread. It's not possible to change the model settings or the model type (GPT3.5/4) later on. Installation \u00b6 Node.JS \u00b6 To install Chat Playground, first, make sure you have Node.js installed. You can use conda to install Node.js as follows: conda install -c conda-forge nodejs Or, to install a specific version of Node.js (this one worked for me on my MacBook---so this will not work on Linux): conda install -c conda-forge nodejs=18.15.0=h26a3f6d_0 Chat Playground \u00b6 Once Node.js is installed, you can install Chat Playground using pip or pipx (if you have nodejs available in your base environment): pipx install chatplayground OpenAI Key \u00b6 Ensure that your OpenAI key is set in an OPENAI_API_KEY environment variable. You then can run the playground with chatplayground Features \u00b6 Preview of possible alternative message threads as an exposee view. Preview of possible alternatives at the message level. Editing messages within a message thread without deleting everything below. Forking message threads (similar to the ChatGPT web app). Messages stored as JSON files in a local directory. Easy sync with cloud services like Dropbox or Google Drive. Real-time updates from the filesystem to the UI. Atomic changes of the stored messages. Screenshots \u00b6 Code & Layout \u00b6 This project was written in ~25 hours using Pynecone . The code is currently in one big Python file, which may benefit from refactoring into a package with multiple files. However, the code is mostly simple and it was quite productive to keep everything together. There are a few issues with the current code (in part due to Pynecone's early stage of development): No tests currently. Calling event functions in State classes requires passing self, even though it shouldn't: self.state_event_function(self) . Issues with streaming events from the OpenAI request to the UI, requiring a hacky workaround for updates to propagate to the UI correctly. Known Pynecone issues, as mentioned in the code. Despite these issues, the project came together very quickly with PyneCone and works quite well. Documentation \u00b6 License: GPL-3.0-only Source Code: https://github.com/blackhc/chatplayground PyPI Package: https://pypi.org/project/chatplayground/ Official Documentation: https://blackhc.github.io/chatplayground Contributing \u00b6 Bug fixes, feature requests, and pull requests are welcome! If you have any questions or suggestions, please open an issue on GitHub. License \u00b6 Chat Playground is licensed under AGPL3.0. If you require a commercial license for any part of the project, please contact the author. Hopefully, this project will inspire new UX paradigms for working with LLMs in the future. Credits \u00b6 This package was created using PyneCone with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#chat-playground","text":"A simple local chat playground with power user features. All messages are stored as JSON files in a local directory, making it easy to sync them with a cloud service like Dropbox or Google Drive and access them from multiple devices while protecting your privacy.","title":"Chat Playground"},{"location":"#motivation","text":"The ChatGPP web app is a great way to play with LLMs, but it has a few limitations: It's not possible to edit messages without deleting everything below. It's hard to see what the explored alternatives are for a given message. It's hard to see what the explored alternatives are for a given message thread. It's not possible to change the model settings or the model type (GPT3.5/4) later on.","title":"Motivation"},{"location":"#installation","text":"","title":"Installation"},{"location":"#nodejs","text":"To install Chat Playground, first, make sure you have Node.js installed. You can use conda to install Node.js as follows: conda install -c conda-forge nodejs Or, to install a specific version of Node.js (this one worked for me on my MacBook---so this will not work on Linux): conda install -c conda-forge nodejs=18.15.0=h26a3f6d_0","title":"Node.JS"},{"location":"#chat-playground_1","text":"Once Node.js is installed, you can install Chat Playground using pip or pipx (if you have nodejs available in your base environment): pipx install chatplayground","title":"Chat Playground"},{"location":"#openai-key","text":"Ensure that your OpenAI key is set in an OPENAI_API_KEY environment variable. You then can run the playground with chatplayground","title":"OpenAI Key"},{"location":"#features","text":"Preview of possible alternative message threads as an exposee view. Preview of possible alternatives at the message level. Editing messages within a message thread without deleting everything below. Forking message threads (similar to the ChatGPT web app). Messages stored as JSON files in a local directory. Easy sync with cloud services like Dropbox or Google Drive. Real-time updates from the filesystem to the UI. Atomic changes of the stored messages.","title":"Features"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#code--layout","text":"This project was written in ~25 hours using Pynecone . The code is currently in one big Python file, which may benefit from refactoring into a package with multiple files. However, the code is mostly simple and it was quite productive to keep everything together. There are a few issues with the current code (in part due to Pynecone's early stage of development): No tests currently. Calling event functions in State classes requires passing self, even though it shouldn't: self.state_event_function(self) . Issues with streaming events from the OpenAI request to the UI, requiring a hacky workaround for updates to propagate to the UI correctly. Known Pynecone issues, as mentioned in the code. Despite these issues, the project came together very quickly with PyneCone and works quite well.","title":"Code &amp; Layout"},{"location":"#documentation","text":"License: GPL-3.0-only Source Code: https://github.com/blackhc/chatplayground PyPI Package: https://pypi.org/project/chatplayground/ Official Documentation: https://blackhc.github.io/chatplayground","title":"Documentation"},{"location":"#contributing","text":"Bug fixes, feature requests, and pull requests are welcome! If you have any questions or suggestions, please open an issue on GitHub.","title":"Contributing"},{"location":"#license","text":"Chat Playground is licensed under AGPL3.0. If you require a commercial license for any part of the project, please contact the author. Hopefully, this project will inspire new UX paradigms for working with LLMs in the future.","title":"License"},{"location":"#credits","text":"This package was created using PyneCone with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"","title":"Modules"},{"location":"changelog/","text":"Changelog \u00b6 [1.2.0] - 2023-05-27 \u00b6 fix a tooltip preventing a menu popup from appearing (disabled the tooltip) rewrite the request logic to set the message content directly and remove all of the barrier logic [1.1.2] - 2023-05-11 \u00b6 fix title editing by using a self-made editable instead of pc.editable [1.1.1] - 2023-05-09 \u00b6 change the default frontend and backend ports [1.1.0] - 2023-05-09 \u00b6 add tooltips. [1.0.3] - 2023-05-08 \u00b6 try something else for pc init . [1.0.2] - 2023-05-08 \u00b6 fix for pc init . [1.0.1] - 2023-05-08 \u00b6 call pc init first to initialize the .web directory if necessary. [1.0.0] - 2023-05-08 \u00b6 first release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#120---2023-05-27","text":"fix a tooltip preventing a menu popup from appearing (disabled the tooltip) rewrite the request logic to set the message content directly and remove all of the barrier logic","title":"[1.2.0] - 2023-05-27"},{"location":"changelog/#112---2023-05-11","text":"fix title editing by using a self-made editable instead of pc.editable","title":"[1.1.2] - 2023-05-11"},{"location":"changelog/#111---2023-05-09","text":"change the default frontend and backend ports","title":"[1.1.1] - 2023-05-09"},{"location":"changelog/#110---2023-05-09","text":"add tooltips.","title":"[1.1.0] - 2023-05-09"},{"location":"changelog/#103---2023-05-08","text":"try something else for pc init .","title":"[1.0.3] - 2023-05-08"},{"location":"changelog/#102---2023-05-08","text":"fix for pc init .","title":"[1.0.2] - 2023-05-08"},{"location":"changelog/#101---2023-05-08","text":"call pc init first to initialize the .web directory if necessary.","title":"[1.0.1] - 2023-05-08"},{"location":"changelog/#100---2023-05-08","text":"first release on PyPI.","title":"[1.0.0] - 2023-05-08"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/blackhc/chatplayground/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 ChatPlayground could always use more documentation, whether as part of the official ChatPlayground docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/blackhc/chatplayground/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up chatplayground for local development. Fork the chatplayground repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/chatplayground.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/blackhc/chatplayground/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_chatplayground.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/blackhc/chatplayground/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"ChatPlayground could always use more documentation, whether as part of the official ChatPlayground docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/blackhc/chatplayground/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up chatplayground for local development. Fork the chatplayground repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/chatplayground.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/blackhc/chatplayground/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_chatplayground.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install ChatPlayground, run this command in your terminal: $ pip install chatplayground This is the preferred method to install ChatPlayground, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for ChatPlayground can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/blackhc/chatplayground Or download the tarball : $ curl -OJL https://github.com/blackhc/chatplayground/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install ChatPlayground, run this command in your terminal: $ pip install chatplayground This is the preferred method to install ChatPlayground, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for ChatPlayground can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/blackhc/chatplayground Or download the tarball : $ curl -OJL https://github.com/blackhc/chatplayground/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To start a local server: chatplayground and then you can connect to the given URL.","title":"Usage"},{"location":"usage/#usage","text":"To start a local server: chatplayground and then you can connect to the given URL.","title":"Usage"}]}